import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import load_model
import streamlit as st
import numpy as np 

st.header('Image Classification')
model = load_model('D:\gym pilot\gym-pilot-application\Image_classify.keras')
data_cat = ['zArmCurlMuchine',
 'zHipAbduction',
 'zLegExtension',
 'zLyingLegCurl',
 'zback_extension',
 'zcable-machine',
 'zcd',
 'zchest_press',
 'zdown',
 'zpd',
 'zpower_leg_press',
 'zsmith_machine',
 'zsp']
img_height = 180
img_width = 180
image =st.text_input('Enter Image name','cable.jpg')

image_load = tf.keras.utils.load_img(image, target_size=(img_height,img_width))
img_arr = tf.keras.utils.array_to_img(image_load)
img_bat=tf.expand_dims(img_arr,0)

predict = model.predict(img_bat)

score = tf.nn.softmax(predict)
st.image(image, width=200)
st.write('gym machine in image is ' + data_cat[np.argmax(score)])
st.write('With accuracy of ' + str(np.max(score)*100))



#app.py
from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import os
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

app = Flask(__name__)

UPLOAD_FOLDER = 'uploads'
GENERATED_GIF_FOLDER = 'generated_gifs'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['GENERATED_GIF_FOLDER'] = GENERATED_GIF_FOLDER

model = load_model('D:/gym pilot/gym-pilot-application/Image_classify.keras')

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def generate_gif(detected_equipment):
    if detected_equipment == 'dumbell':
        return 'dumbell.gif'  # Assuming you have a dumbell.gif file in your 'generated_gifs' folder
    elif detected_equipment == 'treadmill':
        return 'treadmill.gif'  # Assuming you have a treadmill.gif file in your 'generated_gifs' folder
    else:
        return None  # Handle case where no GIF is available for the detected equipment

def preprocess_image(image_path):
    img = image.load_img(image_path, target_size=(180, 180))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

@app.route('/classify', methods=['POST'])
def classify_image():
    if 'image' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    file = request.files['image']

    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)

        img_array = preprocess_image(filepath)
 
        prediction = model.predict(img_array)
        detected_class = np.argmax(prediction)

        # Map detected class to equipment
        if detected_class == 0:
            detected_equipment = 'dumbell'
        elif detected_class == 1:
            detected_equipment = 'treadmill'
        else:
            detected_equipment = 'unknown'

        generated_gif_filename = generate_gif(detected_equipment)

        if generated_gif_filename:
            return jsonify({'gym_machine': detected_equipment, 'generated_gif': generated_gif_filename}), 200
        else:
            return jsonify({'error': 'GIF not available for the detected equipment'}), 404

    else:
        return jsonify({'error': 'File not allowed'}), 400

if __name__ == '__main__':
    app.run(debug=True)


# templating

from flask import Flask, request, render_template
import tensorflow as tf
from tensorflow.keras.models import load_model
import numpy as np
import io  # Import io module for io.BytesIO

app = Flask(__name__)

# Load your trained model
model_path = './modal/Image_classify.keras'  # Update this path to where your model is
model = load_model(model_path)

# Load your labels
labels_path = './modal/labels.txt'  # Update this path to where your labels are
with open(labels_path, 'r') as f:
    data_cat = [line.strip() for line in f.readlines()]

img_height = 180
img_width = 180

@app.route('/', methods=['GET', 'POST'])
def classify_image():
    if request.method == 'POST':
        if 'file' not in request.files:
            return 'No file part'
        file = request.files['file']
        if file.filename == '':
            return 'No selected file'
        if file:
            # Convert the FileStorage object to a BytesIO object
            in_memory_file = io.BytesIO()
            file.save(in_memory_file)
            in_memory_file.seek(0)

            # Load and prepare the image
            image_load = tf.keras.utils.load_img(
                in_memory_file, target_size=(img_height, img_width), color_mode='rgb'
            )
            img_array = tf.keras.utils.img_to_array(image_load)
            img_batch = np.expand_dims(img_array, axis=0)

            # Make a prediction
            predictions = model.predict(img_batch)
            score = tf.nn.softmax(predictions[0])
            result = data_cat[np.argmax(score)]
            accuracy = np.max(score)

            return f'The gym machine in the image is {result} with an accuracy of {accuracy*100:.2f}%'

    return '''
    <!doctype html>
    <title>Image Classification</title>
    <h1>Upload an image for classification</h1>
    <form method=post enctype=multipart/form-data>
      <input type=file name=file>
      <input type=submit value=Upload>
    </form>
    '''

if __name__ == '__main__':
    app.run(debug=True)